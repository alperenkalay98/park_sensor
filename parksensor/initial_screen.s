;STORED MEASURED VALUES AND THRESHOLD VALUE. SINCE I AM USING LOTS OF SUBROUTINES, I AM ALWAYS 
;PUSHING AND POPPING LR FOR NESTED SUBROUTINES. SO,I STORE IT IN MEMORY FIRST, THEN IF REQUIRED, I
;USE THIS VALUES BY SIMPLY READING 
THRESH_UPD	EQU	0x20000400			
MEAS_UPD	EQU	0x20000500			
			
			AREA	sdata,CODE,READONLY
			THUMB

;This is the image i want to see on the screen 
;i am sendimg it 5byte 5 byte beacuse every character allocates 5 bytes
normal		DCB	  0x00, 0x00, 0x00, 0x00, 0x00
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00
			DCB	  0x7f, 0x02, 0x0c, 0x02, 0x7f ;M
			DCB	  0x38, 0x54, 0x54, 0x54, 0x18 ;e
			DCB	  0x20, 0x54, 0x54, 0x54, 0x78 ;a
			DCB	  0x48, 0x54, 0x54, 0x54, 0x20 ;s
			DCB	  0x00, 0x36, 0x36, 0x00, 0x00 ;:
			DCB	  0x21, 0x41, 0x45, 0x4b, 0x31 ;3
			DCB	  0x3e, 0x51, 0x49, 0x45, 0x3e ;0
			DCB	  0x3e, 0x51, 0x49, 0x45, 0x3e ;0
			DCB	  0x7c, 0x04, 0x18, 0x04, 0x78 ;m
			DCB	  0x7c, 0x04, 0x18, 0x04, 0x78 ;m 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00	
			DCB	  0x01, 0x01, 0x7f, 0x01, 0x01 ;T
			DCB	  0x7f, 0x08, 0x04, 0x04, 0x78 ;h
			DCB	  0x7c, 0x08, 0x04, 0x04, 0x08 ;r
			DCB	  0x38, 0x54, 0x54, 0x54, 0x18 ;e
			DCB	  0x00, 0x36, 0x36, 0x00, 0x00 ;:
			DCB	  0x00, 0x42, 0x7f, 0x40, 0x00 ;1
			DCB	  0x3e, 0x51, 0x49, 0x45, 0x3e ;0
			DCB	  0x3e, 0x51, 0x49, 0x45, 0x3e ;0
			DCB	  0x7c, 0x04, 0x18, 0x04, 0x78 ;m
			DCB	  0x7c, 0x04, 0x18, 0x04, 0x78 ;m
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00
			DCB	  0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00
			DCB	  0x00, 0x00, 0x00, 0x00
			DCB	  0x08, 0x08, 0x08, 0x08, 0x08 ;-
			DCB	  0x00, 0x41, 0x22, 0x14, 0x08 ;>
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 ;
			DCB	  0x7f, 0x04, 0x08, 0x10, 0x7f ;N
			DCB	  0x38, 0x44, 0x44, 0x44, 0x38 ;o
			DCB	  0x7c, 0x08, 0x04, 0x04, 0x08 ;r
			DCB	  0x7c, 0x04, 0x18, 0x04, 0x78 ;m
			DCB	  0x20, 0x54, 0x54, 0x54, 0x78 ;a
			DCB	  0x00, 0x41, 0x7f, 0x40, 0x00 ;l
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 ;
			DCB	  0x3e, 0x41, 0x41, 0x41, 0x3e ;O
			DCB	  0x7c, 0x14, 0x14, 0x14, 0x08 ;p
			DCB	  0x00, 0x60, 0x60, 0x00, 0x00 ;.
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00 
			DCB	  0x3e, 0x41, 0x41, 0x41, 0x22 ;C 
			DCB	  0x7e, 0x11, 0x11, 0x11, 0x7e ;A
			DCB	  0x7f, 0x09, 0x19, 0x29, 0x46 ;R
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 ;
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 ;
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 ;
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 ;
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 ;
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 ;
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 ;
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 ;
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 ;
			DCB	  0x00, 0x00, 0x00, 0x00, 0x00 
			DCB	  0x00, 0x00, 0x00, 0x00
			
			AREA	subroutine,CODE,READONLY
			THUMB
			EXTERN	send48x48
			EXPORT	init_screen

init_screen
			PUSH{R0,R5,LR}				;i always pushed lr to make code working in more secure way
										;beacuse sometimes i used nested subroutines.
			
			LDR		R5,=normal			;i used this combination a lot, r5 has the image adress,
			BL		send48x48			;then this subroutine prints it byte by byte

;i am storing the first meas and thresh values which i am printing on the screen
;it is temporary, it will change right after parking sensor works, but it is required for other
;subroutines to make a decision. An initial value is required.
			LDR		R5,=THRESH_UPD		;for now i am restoring in reverse order(msb in 20000400)
			MOV		R0,#0				;i will store it in THRESH_VAL memory in correct order
			ADD		R0,R0,#'0'			;which you can see it on other subroutines
			STRB	R0,[R5,#2]
			STRB	R0,[R5,#1]
			MOV		R0,#1
			ADD		R0,R0,#'0'
			STRB	R0,[R5]
			LDR		R5,=MEAS_UPD		;for now i am restoring in reverse order(msb in 20000500)
			MOV		R0,#0				;;i will store it in MEAS_VAL memory in correct order
			ADD		R0,R0,#'0'			;which you can see it on other subroutines
			STRB	R0,[R5,#2]
			STRB	R0,[R5,#1]
			MOV		R0,#3
			ADD		R0,R0,#'0'
			STRB	R0,[R5]
			POP{R0,R5,LR}
			BX	LR	

			ENDP